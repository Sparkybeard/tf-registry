"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const express_1 = tslib_1.__importDefault(require("express"));
const morgan_1 = tslib_1.__importDefault(require("morgan"));
const swagger_ui_express_1 = tslib_1.__importDefault(require("swagger-ui-express"));
const helmet_1 = tslib_1.__importDefault(require("helmet"));
const cors_1 = tslib_1.__importDefault(require("cors"));
const logger_1 = tslib_1.__importDefault(require("./lib/logger"));
const index_1 = tslib_1.__importDefault(require("./routes/index"));
const app = (0, express_1.default)();
let code;
app.use(express_1.default.json());
app.use(express_1.default.urlencoded({ extended: true }));
app.use((0, helmet_1.default)());
app.use((0, cors_1.default)());
// view engine setup
app.set('views', path_1.default.join(__dirname, 'views'));
app.set('view engine', 'jten');
app.use((0, morgan_1.default)('dev'));
app.use("/docs", swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(undefined, {
    swaggerOptions: {
        url: "/swagger.json",
    },
}));
app.use('/', index_1.default);
// catch 404 and forward to error handler
app.use((_req, _res, next) => {
    const err = new Error('Not Found');
    code = 404;
    next(err);
});
// error handlers
app.use((err, _req, res, next) => {
    if (!res.status || code >= 500) {
        logger_1.default.error(err.stack);
    }
    res.status(code || 500);
    next(err);
});
// development error handler
// will print stacktrace
if (app.get('env') === 'development') {
    app.use((err, _req, res, _next) => {
        res.render('error', {
            message: err.message,
            error: err,
        });
    });
}
// production error handler
// no stacktraces leaked to user
app.use((err, _req, res, _next) => {
    res.render('error', {
        message: err.message,
        error: {},
    });
});
exports.default = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3REFBd0I7QUFDeEIsOERBQThCO0FBQzlCLDREQUE0QjtBQUM1QixvRkFBMkM7QUFFM0MsNERBQTRCO0FBQzVCLHdEQUF3QjtBQUV4QixrRUFBa0M7QUFDbEMsbUVBQW1DO0FBRW5DLE1BQU0sR0FBRyxHQUFHLElBQUEsaUJBQU8sR0FBRSxDQUFDO0FBQ3RCLElBQUksSUFBWSxDQUFDO0FBRWpCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0FBQ3ZCLEdBQUcsQ0FBQyxHQUFHLENBQUMsaUJBQU8sQ0FBQyxVQUFVLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFBO0FBQy9DLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBQSxnQkFBTSxHQUFFLENBQUMsQ0FBQztBQUNsQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUEsY0FBSSxHQUFFLENBQUMsQ0FBQztBQUVoQixvQkFBb0I7QUFDcEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNoRCxHQUFHLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUUvQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUEsZ0JBQU0sRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBRXZCLEdBQUcsQ0FBQyxHQUFHLENBQ0wsT0FBTyxFQUNQLDRCQUFTLENBQUMsS0FBSyxFQUNmLDRCQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtJQUN6QixjQUFjLEVBQUU7UUFDZCxHQUFHLEVBQUUsZUFBZTtLQUNyQjtDQUNGLENBQUMsQ0FDSCxDQUFDO0FBRUYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsZUFBSyxDQUFDLENBQUM7QUFFcEIseUNBQXlDO0FBQ3pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFO0lBQzNCLE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25DLElBQUksR0FBRyxHQUFHLENBQUM7SUFDWCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDWixDQUFDLENBQUMsQ0FBQztBQUVILGlCQUFpQjtBQUNqQixHQUFHLENBQUMsR0FBRyxDQUNMLENBQ0UsR0FBVSxFQUNWLElBQXFCLEVBQ3JCLEdBQXFCLEVBQ3JCLElBQTBCLEVBQzFCLEVBQUU7SUFDRixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxJQUFJLElBQUksR0FBRyxFQUFFO1FBQzlCLGdCQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN6QjtJQUNELEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNaLENBQUMsQ0FDRixDQUFDO0FBRUYsNEJBQTRCO0FBQzVCLHdCQUF3QjtBQUN4QixJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssYUFBYSxFQUFFO0lBQ3BDLEdBQUcsQ0FBQyxHQUFHLENBQ0wsQ0FDRSxHQUFVLEVBQ1YsSUFBcUIsRUFDckIsR0FBcUIsRUFDckIsS0FBMkIsRUFDM0IsRUFBRTtRQUNGLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1lBQ2xCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztZQUNwQixLQUFLLEVBQUUsR0FBRztTQUNYLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FDRixDQUFDO0NBQ0g7QUFFRCwyQkFBMkI7QUFDM0IsZ0NBQWdDO0FBQ2hDLEdBQUcsQ0FBQyxHQUFHLENBQ0wsQ0FDRSxHQUFVLEVBQ1YsSUFBcUIsRUFDckIsR0FBcUIsRUFDckIsS0FBMkIsRUFDM0IsRUFBRTtJQUNGLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO1FBQ2xCLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTztRQUNwQixLQUFLLEVBQUUsRUFBRTtLQUNWLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FDRixDQUFDO0FBRUYsa0JBQWUsR0FBRyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBtb3JnYW4gZnJvbSAnbW9yZ2FuJztcbmltcG9ydCBzd2FnZ2VyVWkgZnJvbSAnc3dhZ2dlci11aS1leHByZXNzJztcblxuaW1wb3J0IGhlbG1ldCBmcm9tICdoZWxtZXQnO1xuaW1wb3J0IGNvcnMgZnJvbSAnY29ycyc7XG5cbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9saWIvbG9nZ2VyJztcbmltcG9ydCBpbmRleCBmcm9tICcuL3JvdXRlcy9pbmRleCc7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbmxldCBjb2RlOiBudW1iZXI7XG5cbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKVxuYXBwLnVzZShoZWxtZXQoKSk7XG5hcHAudXNlKGNvcnMoKSk7XG5cbi8vIHZpZXcgZW5naW5lIHNldHVwXG5hcHAuc2V0KCd2aWV3cycsIHBhdGguam9pbihfX2Rpcm5hbWUsICd2aWV3cycpKTtcbmFwcC5zZXQoJ3ZpZXcgZW5naW5lJywgJ2p0ZW4nKTtcblxuYXBwLnVzZShtb3JnYW4oJ2RldicpKTtcblxuYXBwLnVzZShcbiAgXCIvZG9jc1wiLFxuICBzd2FnZ2VyVWkuc2VydmUsXG4gIHN3YWdnZXJVaS5zZXR1cCh1bmRlZmluZWQsIHtcbiAgICBzd2FnZ2VyT3B0aW9uczoge1xuICAgICAgdXJsOiBcIi9zd2FnZ2VyLmpzb25cIixcbiAgICB9LFxuICB9KSxcbik7XG5cbmFwcC51c2UoJy8nLCBpbmRleCk7XG5cbi8vIGNhdGNoIDQwNCBhbmQgZm9yd2FyZCB0byBlcnJvciBoYW5kbGVyXG5hcHAudXNlKChfcmVxLCBfcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcignTm90IEZvdW5kJyk7XG4gIGNvZGUgPSA0MDQ7XG4gIG5leHQoZXJyKTtcbn0pO1xuXG4vLyBlcnJvciBoYW5kbGVyc1xuYXBwLnVzZShcbiAgKFxuICAgIGVycjogRXJyb3IsXG4gICAgX3JlcTogZXhwcmVzcy5SZXF1ZXN0LFxuICAgIHJlczogZXhwcmVzcy5SZXNwb25zZSxcbiAgICBuZXh0OiBleHByZXNzLk5leHRGdW5jdGlvbixcbiAgKSA9PiB7XG4gICAgaWYgKCFyZXMuc3RhdHVzIHx8IGNvZGUgPj0gNTAwKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoZXJyLnN0YWNrKTtcbiAgICB9XG4gICAgcmVzLnN0YXR1cyhjb2RlIHx8IDUwMCk7XG4gICAgbmV4dChlcnIpO1xuICB9LFxuKTtcblxuLy8gZGV2ZWxvcG1lbnQgZXJyb3IgaGFuZGxlclxuLy8gd2lsbCBwcmludCBzdGFja3RyYWNlXG5pZiAoYXBwLmdldCgnZW52JykgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgYXBwLnVzZShcbiAgICAoXG4gICAgICBlcnI6IEVycm9yLFxuICAgICAgX3JlcTogZXhwcmVzcy5SZXF1ZXN0LFxuICAgICAgcmVzOiBleHByZXNzLlJlc3BvbnNlLFxuICAgICAgX25leHQ6IGV4cHJlc3MuTmV4dEZ1bmN0aW9uLFxuICAgICkgPT4ge1xuICAgICAgcmVzLnJlbmRlcignZXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuICAgICAgICBlcnJvcjogZXJyLFxuICAgICAgfSk7XG4gICAgfSxcbiAgKTtcbn1cblxuLy8gcHJvZHVjdGlvbiBlcnJvciBoYW5kbGVyXG4vLyBubyBzdGFja3RyYWNlcyBsZWFrZWQgdG8gdXNlclxuYXBwLnVzZShcbiAgKFxuICAgIGVycjogRXJyb3IsXG4gICAgX3JlcTogZXhwcmVzcy5SZXF1ZXN0LFxuICAgIHJlczogZXhwcmVzcy5SZXNwb25zZSxcbiAgICBfbmV4dDogZXhwcmVzcy5OZXh0RnVuY3Rpb24sXG4gICkgPT4ge1xuICAgIHJlcy5yZW5kZXIoJ2Vycm9yJywge1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBlcnJvcjoge30sXG4gICAgfSk7XG4gIH0sXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBhcHA7XG4iXX0=